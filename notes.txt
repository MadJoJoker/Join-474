https://join-474-default-rtdb.europe-west1.firebasedatabase.app/

Index.html: abgeschlossen
    fetcht "users" aus Firebase,
    das JSON kommt in die globale Variable "fetchedData".

    kein Upload, keine Veränderung von "fetchedData"


SignUp.html: abgeschlossen
    fetcht "users" aus Firebase,
    das JSON kommt in die globale Variable "fetchedData".

    PUT-Upload des neuen User-Objekts
    push desselben Objekts in "fetchedData" (wäre Quelle für render-
    function, die es hier aber nicht gibt). Erspart neuen fetch

    keine edit-function


add-task.html:
    fetcht *alles* aus Firebase,
    diese Daten werden durchgereicht in "task-to-Firebase.js"
    Objekt wird konvertiert, an Firebase geschickt und in die lokale Kopie
    des Fetches gespeichert ("allData" in task-to-Firebase.js).
    Von da aus kann ohne neuen fetch gerendert werden.

add-task template:
    CW an Mathias: auf dem "save"-Knopf sollte das template die task-id einfügen,
    in etwa so: onclick=addNewTask${taskId}. Upload/edit-function braucht die task-ID

board-site.html:

CW: im nächsten Schritt passe ich die Funktion so an, daß sie auch
den Parameter "task-005" (o.Ä.) benutzen kann (für edit).

Achtung: drag and drop muß auch verfolgt und die neue Position in die Firebase
gemeldet werden 

detail-task-Card:
    CW an Mathias: auf dem "edit"-Knopf sollte das template die task-id einfügen,
    in etwa so: onclick"=startEdit${taskId}. Upload/edit-function braucht die task-ID

    CW an Mathias: auf dem "delete"-Knopf sollte das template die task-id einfügen,
    in etwa so: onclick"=startDelete${taskId}. Upload/edit-function braucht die task-ID

overlay-add-task (in "board"):

contacts.html:




<!-- task-card.html: Dies ist die Basis-HTML-Struktur einer einzelnen Aufgabenkarte.
     Sie enthält Platzhalter (leere Divs, H3, P), die später von JavaScript gefüllt werden.
     Die Klassen (z.B. "task-card", "task-title") werden durch das CSS gestylt. -->

<div class="task-card">
    <!-- Hier kommt die Kategorie der Aufgabe (z.B. "User Story") -->
    <div class="task-category"></div>

    <!-- Hier kommt der Titel der Aufgabe -->
    <h3 class="task-title"></h3>

    <!-- Hier kommt die Beschreibung der Aufgabe -->
    <p class="task-description"></p>

    <!-- Hier kommt der Fortschrittsbalken für Unteraufgaben -->
    <div class="task-progress-bar">
        <!-- Der Füllbalken, dessen Breite dynamisch gesetzt wird -->
        <div class="task-progress-fill"></div>
    </div>
    <!-- Hier kommt die Anzahl der erledigten/gesamten Unteraufgaben (z.B. "1/2 Subtasks") -->
    <div class="task-subtasks-count"></div>

    <!-- Fußzeile der Karte: Zugewiesene Benutzer und Priorität -->
    <div class="task-footer">
        <!-- Avatare der zugewiesenen Benutzer werden hier eingefügt -->
        <div class="assigned-users-avatars"></div>

        <!-- Hier kommt das Prioritäts-Icon (z.B. für "Medium Priority") -->
        <div class="task-priority-icon"></div>
    </div>
</div>
